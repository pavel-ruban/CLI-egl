!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABC	test.cpp	36;"	d	file:
CONTEXT_TYPE	platform.h	5;"	d
CONTEXT_TYPE	platform.h	7;"	d
Context	context.hpp	/^struct Context {$/;"	s
Context::drm	context.hpp	/^  Drm drm;$/;"	m	struct:Context	access:public
Context::flags	context.hpp	/^  Flags flags;$/;"	m	struct:Context	access:public
Context::freetype	context.hpp	/^  Freetype freetype;$/;"	m	struct:Context	access:public
Context::gbm	context.hpp	/^  Gbm gbm;$/;"	m	struct:Context	access:public
Context::gl	context.hpp	/^  GL gl;$/;"	m	struct:Context	access:public
Context::uniforms	context.hpp	/^  Uniforms uniforms;$/;"	m	struct:Context	access:public
CreateEGLContext	esUtil.cpp	/^EGLBoolean CreateEGLContext ( EGLNativeWindowType hWnd, EGLDisplay* eglDisplay,$/;"	f	signature:( EGLNativeWindowType hWnd, EGLDisplay* eglDisplay, EGLContext* eglContext, EGLSurface* eglSurface, EGLint attribList[])
Draw	render.cpp	/^void Draw(CONTEXT_TYPE context) {$/;"	f	signature:(CONTEXT_TYPE context)
Draw	render.hpp	/^void Draw(ESContext *esContext);$/;"	p	signature:(ESContext *esContext)
Drm	context.hpp	/^struct Drm {$/;"	s
Drm::connector_id	context.hpp	/^	uint32_t connector_id;$/;"	m	struct:Drm	access:public
Drm::crtc_id	context.hpp	/^	uint32_t crtc_id;$/;"	m	struct:Drm	access:public
Drm::fd	context.hpp	/^	int fd;$/;"	m	struct:Drm	access:public
Drm::mode	context.hpp	/^	drmModeModeInfo *mode;$/;"	m	struct:Drm	access:public
Drm::saved_crtc	context.hpp	/^	drmModeCrtc *saved_crtc;$/;"	m	struct:Drm	access:public
ESCALLBACK	esUtil.h	36;"	d
ESContext	esUtil.h	/^} ESContext;$/;"	t	typeref:struct:_escontext
ESMatrix	esUtil.h	/^} ESMatrix;$/;"	t	typeref:struct:__anon2
ESUTIL_API	esUtil.h	35;"	d
ESUTIL_H	esUtil.h	18;"	d
ES_WINDOW_ALPHA	esUtil.h	42;"	d
ES_WINDOW_DEPTH	esUtil.h	44;"	d
ES_WINDOW_MULTISAMPLE	esUtil.h	48;"	d
ES_WINDOW_RGB	esUtil.h	40;"	d
ES_WINDOW_STENCIL	esUtil.h	46;"	d
FALSE	esUtil.h	56;"	d
Flags	context.hpp	/^struct Flags {$/;"	s
Flags::debug	context.hpp	/^  bool debug;$/;"	m	struct:Flags	access:public
Flags::run	context.hpp	/^  bool run;$/;"	m	struct:Flags	access:public
Freetype	context.hpp	/^struct Freetype {$/;"	s
Freetype::face	context.hpp	/^  FT_Face face;$/;"	m	struct:Freetype	access:public
Freetype::ft	context.hpp	/^  FT_Library ft;$/;"	m	struct:Freetype	access:public
Freetype::g	context.hpp	/^  FT_GlyphSlot g;$/;"	m	struct:Freetype	access:public
GL	context.hpp	/^struct GL {$/;"	s
GL::colorsoffset	context.hpp	/^	GLuint positionsoffset, colorsoffset, normalsoffset;$/;"	m	struct:GL	access:public
GL::config	context.hpp	/^	EGLConfig config;$/;"	m	struct:GL	access:public
GL::context	context.hpp	/^	EGLContext context;$/;"	m	struct:GL	access:public
GL::display	context.hpp	/^	EGLDisplay display;$/;"	m	struct:GL	access:public
GL::modelviewmatrix	context.hpp	/^	GLint modelviewmatrix, modelviewprojectionmatrix, normalmatrix;$/;"	m	struct:GL	access:public
GL::modelviewprojectionmatrix	context.hpp	/^	GLint modelviewmatrix, modelviewprojectionmatrix, normalmatrix;$/;"	m	struct:GL	access:public
GL::normalmatrix	context.hpp	/^	GLint modelviewmatrix, modelviewprojectionmatrix, normalmatrix;$/;"	m	struct:GL	access:public
GL::normalsoffset	context.hpp	/^	GLuint positionsoffset, colorsoffset, normalsoffset;$/;"	m	struct:GL	access:public
GL::positionsoffset	context.hpp	/^	GLuint positionsoffset, colorsoffset, normalsoffset;$/;"	m	struct:GL	access:public
GL::program	context.hpp	/^	GLuint program;$/;"	m	struct:GL	access:public
GL::surface	context.hpp	/^	EGLSurface surface;$/;"	m	struct:GL	access:public
GL::vbo	context.hpp	/^	GLuint vbo[2];$/;"	m	struct:GL	access:public
Gbm	context.hpp	/^struct Gbm {$/;"	s
Gbm::dev	context.hpp	/^	struct gbm_device *dev;$/;"	m	struct:Gbm	typeref:struct:Gbm::gbm_device	access:public
Gbm::surface	context.hpp	/^	struct gbm_surface *surface;$/;"	m	struct:Gbm	typeref:struct:Gbm::gbm_surface	access:public
Init	gl.cpp	/^int Init(ESContext *esContext) {$/;"	f	signature:(ESContext *esContext)
Init	gl.hpp	/^int Init(ESContext *esContext);$/;"	p	signature:(ESContext *esContext)
KEYBOARD	input.cpp	22;"	d	file:
LoadShader	gl.cpp	/^GLuint LoadShader(GLenum type, const char *shaderSrc) {$/;"	f	signature:(GLenum type, const char *shaderSrc)
LoadShader	gl.hpp	/^GLuint LoadShader(GLenum, const char *);$/;"	p	signature:(GLenum, const char *)
MOUSE	input.cpp	23;"	d	file:
OVECCOUNT	input.cpp	24;"	d	file:
PI	render.cpp	46;"	d	file:
TRUE	esUtil.h	59;"	d
Uniforms	context.hpp	/^struct Uniforms {$/;"	s
Uniforms::uniform_color	context.hpp	/^  GLint uniform_color;$/;"	m	struct:Uniforms	access:public
Uniforms::uniform_istext	context.hpp	/^  GLint uniform_istext;$/;"	m	struct:Uniforms	access:public
UserData	context.hpp	/^} UserData;$/;"	t	typeref:struct:__anon1
WinCreate	esUtil.cpp	/^EGLBoolean WinCreate(ESContext *esContext, const char *title)$/;"	f	signature:(ESContext *esContext, const char *title)
__anon1::debug	context.hpp	/^  bool debug;$/;"	m	struct:__anon1	access:public
__anon1::freetype	context.hpp	/^  Freetype freetype;$/;"	m	struct:__anon1	access:public
__anon1::programObject	context.hpp	/^  GLuint programObject;$/;"	m	struct:__anon1	access:public
__anon1::run	context.hpp	/^  bool run;$/;"	m	struct:__anon1	access:public
__anon1::run	test.cpp	/^  int run;$/;"	m	struct:__anon1	file:	access:public
__anon1::uniforms	context.hpp	/^  Uniforms uniforms;$/;"	m	struct:__anon1	access:public
__anon1::vbo	context.hpp	/^  GLuint vbo[2];$/;"	m	struct:__anon1	access:public
__anon2::bb	test.cpp	/^  bbb* bb;$/;"	m	struct:__anon2	file:	access:public
__anon2::m	esUtil.h	/^    GLfloat   m[4][4];$/;"	m	struct:__anon2	access:public
__anon3::kbd	input.h	/^  int kbd;$/;"	m	struct:__anon3	access:public
__anon3::mouse	input.h	/^  int mouse;$/;"	m	struct:__anon3	access:public
__anon4::run	test3.cpp	/^  int run;$/;"	m	struct:__anon4	file:	access:public
__anon5::bb	test3.cpp	/^  bbb* bb;$/;"	m	struct:__anon5	file:	access:public
_egl_use_drm	platform.h	1;"	d
_escontext	esUtil.h	/^typedef struct _escontext$/;"	s
_escontext::drawFunc	esUtil.h	/^   void (ESCALLBACK *drawFunc) ( struct _escontext * );$/;"	m	struct:_escontext	access:public
_escontext::eglContext	esUtil.h	/^   EGLContext  eglContext;$/;"	m	struct:_escontext	access:public
_escontext::eglDisplay	esUtil.h	/^   EGLDisplay  eglDisplay;$/;"	m	struct:_escontext	access:public
_escontext::eglSurface	esUtil.h	/^   EGLSurface  eglSurface;$/;"	m	struct:_escontext	access:public
_escontext::hWnd	esUtil.h	/^   EGLNativeWindowType  hWnd;$/;"	m	struct:_escontext	access:public
_escontext::height	esUtil.h	/^   GLint       height;$/;"	m	struct:_escontext	access:public
_escontext::keyFunc	esUtil.h	/^   void (ESCALLBACK *keyFunc) ( struct _escontext *, unsigned char, int, int );$/;"	m	struct:_escontext	access:public
_escontext::updateFunc	esUtil.h	/^   void (ESCALLBACK *updateFunc) ( struct _escontext *, float deltaTime );$/;"	m	struct:_escontext	access:public
_escontext::userData	esUtil.h	/^   UserData       userData;$/;"	m	struct:_escontext	access:public
_escontext::width	esUtil.h	/^   GLint       width;$/;"	m	struct:_escontext	access:public
abc	test.cpp	/^} abc;$/;"	t	typeref:struct:__anon2	file:
abc	test3.cpp	/^} abc;$/;"	t	typeref:struct:__anon5	file:
bb	test.cpp	/^  bbb* bb;$/;"	m	struct:__anon2	file:	access:public
bb	test3.cpp	/^  bbb* bb;$/;"	m	struct:__anon5	file:	access:public
bbb	test.cpp	/^} bbb;$/;"	t	typeref:struct:__anon1	file:
bbb	test3.cpp	/^} bbb;$/;"	t	typeref:struct:__anon4	file:
bo	context.hpp	/^	struct gbm_bo *bo;$/;"	m	struct:drm_fb	typeref:struct:drm_fb::gbm_bo	access:public
bone	skeleton.cpp	/^bone::bone() {$/;"	f	class:bone	signature:()
bone	skeleton.cpp	/^bone::bone(bone* bone, int weight) {$/;"	f	class:bone	signature:(bone* bone, int weight)
bone	skeleton.cpp	/^bone::bone(int weight) {$/;"	f	class:bone	signature:(int weight)
bone	skeleton.cpp	/^bone::bone(string name) {$/;"	f	class:bone	signature:(string name)
bone	skeleton.cpp	/^bone::bone(string name, bone* bone, int weight) {$/;"	f	class:bone	signature:(string name, bone* bone, int weight)
bone	skeleton.cpp	/^bone::bone(string name, bone* bone, vector < vector < GLfloat > > matrix, int weight) {$/;"	f	class:bone	signature:(string name, bone* bone, vector < vector < GLfloat > > matrix, int weight)
bone	skeleton.cpp	/^bone::bone(vector < vector < GLfloat > > matrix, int weight) {$/;"	f	class:bone	signature:(vector < vector < GLfloat > > matrix, int weight)
bone	skeleton.hpp	/^    bone();$/;"	p	class:bone	access:public	signature:()
bone	skeleton.hpp	/^    bone(bone*, int = 0);$/;"	p	class:bone	access:public	signature:(bone*, int = 0)
bone	skeleton.hpp	/^    bone(bone*, std::vector < std::vector < GLfloat > >, int = 0);$/;"	p	class:bone	access:public	signature:(bone*, std::vector < std::vector < GLfloat > >, int = 0)
bone	skeleton.hpp	/^    bone(int);$/;"	p	class:bone	access:public	signature:(int)
bone	skeleton.hpp	/^    bone(std::string);$/;"	p	class:bone	access:public	signature:(std::string)
bone	skeleton.hpp	/^    bone(std::string, bone*, int = 0);$/;"	p	class:bone	access:public	signature:(std::string, bone*, int = 0)
bone	skeleton.hpp	/^    bone(std::string, bone*, std::vector < std::vector < GLfloat > >, int = 0);$/;"	p	class:bone	access:public	signature:(std::string, bone*, std::vector < std::vector < GLfloat > >, int = 0)
bone	skeleton.hpp	/^    bone(std::vector < std::vector < GLfloat > >, int = 0);$/;"	p	class:bone	access:public	signature:(std::vector < std::vector < GLfloat > >, int = 0)
bone	skeleton.hpp	/^class bone {$/;"	c
bone	test2.cpp	/^    bone();$/;"	p	class:bone	file:	access:public	signature:()
bone	test2.cpp	/^    bone(bone*, int = 0);$/;"	p	class:bone	file:	access:public	signature:(bone*, int = 0)
bone	test2.cpp	/^    bone(bone*, vector < vector < GLfloat > >, int = 0);$/;"	p	class:bone	file:	access:public	signature:(bone*, vector < vector < GLfloat > >, int = 0)
bone	test2.cpp	/^    bone(int);$/;"	p	class:bone	file:	access:public	signature:(int)
bone	test2.cpp	/^    bone(string);$/;"	p	class:bone	file:	access:public	signature:(string)
bone	test2.cpp	/^    bone(string, bone*, int = 0);$/;"	p	class:bone	file:	access:public	signature:(string, bone*, int = 0)
bone	test2.cpp	/^    bone(string, bone*, vector < vector < GLfloat > >, int = 0);$/;"	p	class:bone	file:	access:public	signature:(string, bone*, vector < vector < GLfloat > >, int = 0)
bone	test2.cpp	/^    bone(vector < vector < GLfloat > >, int = 0);$/;"	p	class:bone	file:	access:public	signature:(vector < vector < GLfloat > >, int = 0)
bone	test2.cpp	/^bone::bone() {$/;"	f	class:bone	signature:()
bone	test2.cpp	/^bone::bone(bone* bone, int weight) {$/;"	f	class:bone	signature:(bone* bone, int weight)
bone	test2.cpp	/^bone::bone(int weight) {$/;"	f	class:bone	signature:(int weight)
bone	test2.cpp	/^bone::bone(string name) {$/;"	f	class:bone	signature:(string name)
bone	test2.cpp	/^bone::bone(string name, bone* bone, int weight) {$/;"	f	class:bone	signature:(string name, bone* bone, int weight)
bone	test2.cpp	/^bone::bone(string name, bone* bone, vector < vector < GLfloat > > matrix, int weight) {$/;"	f	class:bone	signature:(string name, bone* bone, vector < vector < GLfloat > > matrix, int weight)
bone	test2.cpp	/^bone::bone(vector < vector < GLfloat > > matrix, int weight) {$/;"	f	class:bone	signature:(vector < vector < GLfloat > > matrix, int weight)
bone	test2.cpp	/^class bone {$/;"	c	file:
bone::bone	skeleton.cpp	/^bone::bone() {$/;"	f	class:bone	signature:()
bone::bone	skeleton.cpp	/^bone::bone(bone* bone, int weight) {$/;"	f	class:bone	signature:(bone* bone, int weight)
bone::bone	skeleton.cpp	/^bone::bone(int weight) {$/;"	f	class:bone	signature:(int weight)
bone::bone	skeleton.cpp	/^bone::bone(string name) {$/;"	f	class:bone	signature:(string name)
bone::bone	skeleton.cpp	/^bone::bone(string name, bone* bone, int weight) {$/;"	f	class:bone	signature:(string name, bone* bone, int weight)
bone::bone	skeleton.cpp	/^bone::bone(string name, bone* bone, vector < vector < GLfloat > > matrix, int weight) {$/;"	f	class:bone	signature:(string name, bone* bone, vector < vector < GLfloat > > matrix, int weight)
bone::bone	skeleton.cpp	/^bone::bone(vector < vector < GLfloat > > matrix, int weight) {$/;"	f	class:bone	signature:(vector < vector < GLfloat > > matrix, int weight)
bone::bone	skeleton.hpp	/^    bone();$/;"	p	class:bone	access:public	signature:()
bone::bone	skeleton.hpp	/^    bone(bone*, int = 0);$/;"	p	class:bone	access:public	signature:(bone*, int = 0)
bone::bone	skeleton.hpp	/^    bone(bone*, std::vector < std::vector < GLfloat > >, int = 0);$/;"	p	class:bone	access:public	signature:(bone*, std::vector < std::vector < GLfloat > >, int = 0)
bone::bone	skeleton.hpp	/^    bone(int);$/;"	p	class:bone	access:public	signature:(int)
bone::bone	skeleton.hpp	/^    bone(std::string);$/;"	p	class:bone	access:public	signature:(std::string)
bone::bone	skeleton.hpp	/^    bone(std::string, bone*, int = 0);$/;"	p	class:bone	access:public	signature:(std::string, bone*, int = 0)
bone::bone	skeleton.hpp	/^    bone(std::string, bone*, std::vector < std::vector < GLfloat > >, int = 0);$/;"	p	class:bone	access:public	signature:(std::string, bone*, std::vector < std::vector < GLfloat > >, int = 0)
bone::bone	skeleton.hpp	/^    bone(std::vector < std::vector < GLfloat > >, int = 0);$/;"	p	class:bone	access:public	signature:(std::vector < std::vector < GLfloat > >, int = 0)
bone::bone	test2.cpp	/^    bone();$/;"	p	class:bone	file:	access:public	signature:()
bone::bone	test2.cpp	/^    bone(bone*, int = 0);$/;"	p	class:bone	file:	access:public	signature:(bone*, int = 0)
bone::bone	test2.cpp	/^    bone(bone*, vector < vector < GLfloat > >, int = 0);$/;"	p	class:bone	file:	access:public	signature:(bone*, vector < vector < GLfloat > >, int = 0)
bone::bone	test2.cpp	/^    bone(int);$/;"	p	class:bone	file:	access:public	signature:(int)
bone::bone	test2.cpp	/^    bone(string);$/;"	p	class:bone	file:	access:public	signature:(string)
bone::bone	test2.cpp	/^    bone(string, bone*, int = 0);$/;"	p	class:bone	file:	access:public	signature:(string, bone*, int = 0)
bone::bone	test2.cpp	/^    bone(string, bone*, vector < vector < GLfloat > >, int = 0);$/;"	p	class:bone	file:	access:public	signature:(string, bone*, vector < vector < GLfloat > >, int = 0)
bone::bone	test2.cpp	/^    bone(vector < vector < GLfloat > >, int = 0);$/;"	p	class:bone	file:	access:public	signature:(vector < vector < GLfloat > >, int = 0)
bone::bone	test2.cpp	/^bone::bone() {$/;"	f	class:bone	signature:()
bone::bone	test2.cpp	/^bone::bone(bone* bone, int weight) {$/;"	f	class:bone	signature:(bone* bone, int weight)
bone::bone	test2.cpp	/^bone::bone(int weight) {$/;"	f	class:bone	signature:(int weight)
bone::bone	test2.cpp	/^bone::bone(string name) {$/;"	f	class:bone	signature:(string name)
bone::bone	test2.cpp	/^bone::bone(string name, bone* bone, int weight) {$/;"	f	class:bone	signature:(string name, bone* bone, int weight)
bone::bone	test2.cpp	/^bone::bone(string name, bone* bone, vector < vector < GLfloat > > matrix, int weight) {$/;"	f	class:bone	signature:(string name, bone* bone, vector < vector < GLfloat > > matrix, int weight)
bone::bone	test2.cpp	/^bone::bone(vector < vector < GLfloat > > matrix, int weight) {$/;"	f	class:bone	signature:(vector < vector < GLfloat > > matrix, int weight)
bone::matrix	skeleton.hpp	/^    std::vector< std::vector< GLfloat > > matrix;$/;"	m	class:bone	access:public
bone::matrix	test2.cpp	/^    vector< vector< GLfloat > > matrix;$/;"	m	class:bone	file:	access:public
bone::multipleMatrix	skeleton.cpp	/^void bone::multipleMatrix (vector < vector < GLfloat > > mMatrix) {$/;"	f	class:bone	signature:(vector < vector < GLfloat > > mMatrix)
bone::multipleMatrix	skeleton.hpp	/^    void multipleMatrix (std::vector < std::vector < GLfloat > > mMatrix);$/;"	p	class:bone	access:public	signature:(std::vector < std::vector < GLfloat > > mMatrix)
bone::multipleMatrix	test2.cpp	/^    void multipleMatrix (vector < vector < GLfloat > > mMatrix) {$/;"	f	class:bone	access:public	signature:(vector < vector < GLfloat > > mMatrix)
bone::name	skeleton.hpp	/^    std::string name;$/;"	m	class:bone	access:public
bone::name	test2.cpp	/^    string name;$/;"	m	class:bone	file:	access:public
bone::parent	skeleton.hpp	/^    bone* parent;$/;"	m	class:bone	access:public
bone::parent	test2.cpp	/^    bone* parent;$/;"	m	class:bone	file:	access:public
bone::weight	skeleton.hpp	/^    GLint weight;  $/;"	m	class:bone	access:public
bone::weight	test2.cpp	/^    GLint weight;  $/;"	m	class:bone	file:	access:public
colorsoffset	context.hpp	/^	GLuint positionsoffset, colorsoffset, normalsoffset;$/;"	m	struct:GL	access:public
config	context.hpp	/^	EGLConfig config;$/;"	m	struct:GL	access:public
connector_id	context.hpp	/^	uint32_t connector_id;$/;"	m	struct:Drm	access:public
context	context.hpp	/^	EGLContext context;$/;"	m	struct:GL	access:public
crtc_id	context.hpp	/^	uint32_t crtc_id;$/;"	m	struct:Drm	access:public
debug	context.hpp	/^  bool debug;$/;"	m	struct:Flags	access:public
debug	context.hpp	/^  bool debug;$/;"	m	struct:__anon1	access:public
dev	context.hpp	/^	struct gbm_device *dev;$/;"	m	struct:Gbm	typeref:struct:Gbm::gbm_device	access:public
display	context.hpp	/^	EGLDisplay display;$/;"	m	struct:GL	access:public
drawFunc	esUtil.h	/^   void (ESCALLBACK *drawFunc) ( struct _escontext * );$/;"	m	struct:_escontext	access:public
drm	context.hpp	/^  Drm drm;$/;"	m	struct:Context	access:public
drm_fb	context.hpp	/^struct drm_fb {$/;"	s
drm_fb::bo	context.hpp	/^	struct gbm_bo *bo;$/;"	m	struct:drm_fb	typeref:struct:drm_fb::gbm_bo	access:public
drm_fb::fb_id	context.hpp	/^	uint32_t fb_id;$/;"	m	struct:drm_fb	access:public
drm_fb_destroy_callback	drm.cpp	/^static void drm_fb_destroy_callback(struct gbm_bo *bo, void *data) {$/;"	f	file:	signature:(struct gbm_bo *bo, void *data)
drm_fb_destroy_callback	drm.hpp	/^static void drm_fb_destroy_callback(struct gbm_bo *bo, void *data);$/;"	p	signature:(struct gbm_bo *bo, void *data)
drm_fb_get_from_bo	drm.cpp	/^static struct drm_fb* drm_fb_get_from_bo(struct gbm_bo *bo) {$/;"	f	file:	signature:(struct gbm_bo *bo)
drm_fb_get_from_bo	drm.hpp	/^static struct drm_fb* drm_fb_get_from_bo(struct gbm_bo *bo, Context* context);$/;"	p	signature:(struct gbm_bo *bo, Context* context)
dump_bone	skeleton.cpp	/^void dump_bone(bone* bone) {$/;"	f	signature:(bone* bone)
dump_bone	test2.cpp	/^void dump_bone(bone* bone) {$/;"	f	signature:(bone* bone)
dump_matrix	skeleton.cpp	/^void dump_matrix(vector< vector< GLfloat > >* matrix, int tab = 0) {$/;"	f	signature:(vector< vector< GLfloat > >* matrix, int tab = 0)
dump_matrix	test2.cpp	/^void dump_matrix(vector< vector< GLfloat > >* matrix, int tab = 0) {$/;"	f	signature:(vector< vector< GLfloat > >* matrix, int tab = 0)
eglContext	esUtil.h	/^   EGLContext  eglContext;$/;"	m	struct:_escontext	access:public
eglDisplay	esUtil.h	/^   EGLDisplay  eglDisplay;$/;"	m	struct:_escontext	access:public
eglSurface	esUtil.h	/^   EGLSurface  eglSurface;$/;"	m	struct:_escontext	access:public
esCreateWindow	esUtil.cpp	/^GLboolean ESUTIL_API esCreateWindow ( ESContext *esContext, const char* title, GLint width, GLint height, GLuint flags )$/;"	f	signature:( ESContext *esContext, const char* title, GLint width, GLint height, GLuint flags )
esCreateWindow	esUtil.h	/^GLboolean ESUTIL_API esCreateWindow ( ESContext *esContext, const char *title, GLint width, GLint height, GLuint flags );$/;"	p	signature:( ESContext *esContext, const char *title, GLint width, GLint height, GLuint flags )
esFrustum	esUtil.h	/^void ESUTIL_API esFrustum(ESMatrix *result, float left, float right, float bottom, float top, float nearZ, float farZ);$/;"	p	signature:(ESMatrix *result, float left, float right, float bottom, float top, float nearZ, float farZ)
esGenCube	esUtil.h	/^int ESUTIL_API esGenCube ( float scale, GLfloat **vertices, GLfloat **normals, $/;"	p	signature:( float scale, GLfloat **vertices, GLfloat **normals, GLfloat **texCoords, GLuint **indices )
esGenSphere	esUtil.h	/^int ESUTIL_API esGenSphere ( int numSlices, float radius, GLfloat **vertices, GLfloat **normals, $/;"	p	signature:( int numSlices, float radius, GLfloat **vertices, GLfloat **normals, GLfloat **texCoords, GLuint **indices )
esInitContext	esUtil.cpp	/^void ESUTIL_API esInitContext ( ESContext *esContext )$/;"	f	signature:( ESContext *esContext )
esInitContext	esUtil.h	/^void ESUTIL_API esInitContext ( ESContext *esContext );$/;"	p	signature:( ESContext *esContext )
esLoadProgram	esUtil.h	/^GLuint ESUTIL_API esLoadProgram ( const char *vertShaderSrc, const char *fragShaderSrc );$/;"	p	signature:( const char *vertShaderSrc, const char *fragShaderSrc )
esLoadShader	esUtil.h	/^GLuint ESUTIL_API esLoadShader ( GLenum type, const char *shaderSrc );$/;"	p	signature:( GLenum type, const char *shaderSrc )
esLoadTGA	esUtil.cpp	/^char* ESUTIL_API esLoadTGA ( char *fileName, int *width, int *height )$/;"	f	signature:( char *fileName, int *width, int *height )
esLoadTGA	esUtil.h	/^char* ESUTIL_API esLoadTGA ( char *fileName, int *width, int *height );$/;"	p	signature:( char *fileName, int *width, int *height )
esLogMessage	esUtil.cpp	/^void ESUTIL_API esLogMessage ( const char *formatStr, ... )$/;"	f	signature:( const char *formatStr, ... )
esLogMessage	esUtil.h	/^void ESUTIL_API esLogMessage ( const char *formatStr, ... );$/;"	p	signature:( const char *formatStr, ... )
esMainLoop	esUtil.cpp	/^void ESUTIL_API esMainLoop ( ESContext *esContext )$/;"	f	signature:( ESContext *esContext )
esMainLoop	esUtil.h	/^void ESUTIL_API esMainLoop ( ESContext *esContext );$/;"	p	signature:( ESContext *esContext )
esMatrixLoadIdentity	esUtil.h	/^void ESUTIL_API esMatrixLoadIdentity(ESMatrix *result);$/;"	p	signature:(ESMatrix *result)
esMatrixMultiply	esUtil.h	/^void ESUTIL_API esMatrixMultiply(ESMatrix *result, ESMatrix *srcA, ESMatrix *srcB);$/;"	p	signature:(ESMatrix *result, ESMatrix *srcA, ESMatrix *srcB)
esOrtho	esUtil.h	/^void ESUTIL_API esOrtho(ESMatrix *result, float left, float right, float bottom, float top, float nearZ, float farZ);$/;"	p	signature:(ESMatrix *result, float left, float right, float bottom, float top, float nearZ, float farZ)
esPerspective	esUtil.h	/^void ESUTIL_API esPerspective(ESMatrix *result, float fovy, float aspect, float nearZ, float farZ);$/;"	p	signature:(ESMatrix *result, float fovy, float aspect, float nearZ, float farZ)
esRegisterDrawFunc	esUtil.cpp	/^void ESUTIL_API esRegisterDrawFunc ( ESContext *esContext, void (ESCALLBACK *drawFunc) (ESContext* ) )$/;"	f	signature:( ESContext *esContext, void (ESCALLBACK *drawFunc) (ESContext* ) )
esRegisterDrawFunc	esUtil.h	/^void ESUTIL_API esRegisterDrawFunc ( ESContext *esContext, void (ESCALLBACK *drawFunc) ( ESContext* ) );$/;"	p	signature:( ESContext *esContext, void (ESCALLBACK *drawFunc) ( ESContext* ) )
esRegisterKeyFunc	esUtil.cpp	/^void ESUTIL_API esRegisterKeyFunc ( ESContext *esContext,$/;"	f	signature:( ESContext *esContext, void (ESCALLBACK *keyFunc) (ESContext*, unsigned char, int, int ) )
esRegisterKeyFunc	esUtil.h	/^void ESUTIL_API esRegisterKeyFunc ( ESContext *esContext, $/;"	p	signature:( ESContext *esContext, void (ESCALLBACK *drawFunc) ( ESContext*, unsigned char, int, int ) )
esRegisterUpdateFunc	esUtil.cpp	/^void ESUTIL_API esRegisterUpdateFunc ( ESContext *esContext, void (ESCALLBACK *updateFunc) ( ESContext*, float ) )$/;"	f	signature:( ESContext *esContext, void (ESCALLBACK *updateFunc) ( ESContext*, float ) )
esRegisterUpdateFunc	esUtil.h	/^void ESUTIL_API esRegisterUpdateFunc ( ESContext *esContext, void (ESCALLBACK *updateFunc) ( ESContext*, float ) );$/;"	p	signature:( ESContext *esContext, void (ESCALLBACK *updateFunc) ( ESContext*, float ) )
esRotate	esUtil.h	/^void ESUTIL_API esRotate(ESMatrix *result, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);$/;"	p	signature:(ESMatrix *result, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
esScale	esUtil.h	/^void ESUTIL_API esScale(ESMatrix *result, GLfloat sx, GLfloat sy, GLfloat sz);$/;"	p	signature:(ESMatrix *result, GLfloat sx, GLfloat sy, GLfloat sz)
esTranslate	esUtil.h	/^void ESUTIL_API esTranslate(ESMatrix *result, GLfloat tx, GLfloat ty, GLfloat tz);$/;"	p	signature:(ESMatrix *result, GLfloat tx, GLfloat ty, GLfloat tz)
event_thread	main.cpp	/^void event_thread(CONTEXT_TYPE context) {$/;"	f	signature:(CONTEXT_TYPE context)
face	context.hpp	/^  FT_Face face;$/;"	m	struct:Freetype	access:public
fb_id	context.hpp	/^	uint32_t fb_id;$/;"	m	struct:drm_fb	access:public
fd	context.hpp	/^	int fd;$/;"	m	struct:Drm	access:public
flags	context.hpp	/^  Flags flags;$/;"	m	struct:Context	access:public
freetype	context.hpp	/^  Freetype freetype;$/;"	m	struct:Context	access:public
freetype	context.hpp	/^  Freetype freetype;$/;"	m	struct:__anon1	access:public
ft	context.hpp	/^  FT_Library ft;$/;"	m	struct:Freetype	access:public
g	context.hpp	/^  FT_GlyphSlot g;$/;"	m	struct:Freetype	access:public
gbm	context.hpp	/^  Gbm gbm;$/;"	m	struct:Context	access:public
gl	context.hpp	/^  GL gl;$/;"	m	struct:Context	access:public
graphic_thread	main.cpp	/^void graphic_thread(CONTEXT_TYPE context) {$/;"	f	signature:(CONTEXT_TYPE context)
hWnd	esUtil.h	/^   EGLNativeWindowType  hWnd;$/;"	m	struct:_escontext	access:public
handleEvent	input.cpp	/^void handleEvent(int fd, ESContext* esContext) {$/;"	f	signature:(int fd, ESContext* esContext)
handleEvent	input.h	/^void handleEvent(int, ESContext*);$/;"	p	signature:(int, ESContext*)
height	esUtil.h	/^   GLint       height;$/;"	m	struct:_escontext	access:public
ii	render.cpp	/^unsigned int ii = 0;$/;"	v
initInput	input.cpp	/^inputFds initInput() {$/;"	f	signature:()
initInput	input.h	/^inputFds initInput();$/;"	p	signature:()
init_drm	drm.cpp	/^static int init_drm(Context* context) {$/;"	f	file:	signature:(Context* context)
init_drm	drm.hpp	/^static int init_drm(Context* context);$/;"	p	signature:(Context* context)
init_gbm	drm.cpp	/^static int init_gbm(Context* context) {$/;"	f	file:	signature:(Context* context)
init_gbm	drm.hpp	/^static int init_gbm(Context* context);$/;"	p	signature:(Context* context)
init_gl	drm.cpp	/^static int init_gl(Context* context) {$/;"	f	file:	signature:(Context* context)
init_gl	drm.hpp	/^static int init_gl(Context* context);$/;"	p	signature:(Context* context)
inputFds	input.h	/^} inputFds;$/;"	t	typeref:struct:__anon3
kbd	input.h	/^  int kbd;$/;"	m	struct:__anon3	access:public
keyFunc	esUtil.h	/^   void (ESCALLBACK *keyFunc) ( struct _escontext *, unsigned char, int, int );$/;"	m	struct:_escontext	access:public
m	esUtil.h	/^    GLfloat   m[4][4];$/;"	m	struct:__anon2	access:public
m	test3.cpp	/^void m(abc* x) {$/;"	f	signature:(abc* x)
m2	test3.cpp	/^void m2(abc* x) {$/;"	f	signature:(abc* x)
mAngle	gl.cpp	/^float mAngle = 0.0;$/;"	v
mAngleCos	gl.cpp	/^float mAngleCos = 0.0;$/;"	v
mAngleSin	gl.cpp	/^float mAngleSin = 0.0;$/;"	v
main	main.cpp	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
main	test.cpp	/^int main(int argc, char* argv[]) {$/;"	f	signature:(int argc, char* argv[])
main	test2.cpp	/^int main(int argc, char* argv[]) {$/;"	f	signature:(int argc, char* argv[])
matrix	skeleton.hpp	/^    std::vector< std::vector< GLfloat > > matrix;$/;"	m	class:bone	access:public
matrix	test2.cpp	/^    vector< vector< GLfloat > > matrix;$/;"	m	class:bone	file:	access:public
mode	context.hpp	/^	drmModeModeInfo *mode;$/;"	m	struct:Drm	access:public
modelviewmatrix	context.hpp	/^	GLint modelviewmatrix, modelviewprojectionmatrix, normalmatrix;$/;"	m	struct:GL	access:public
modelviewprojectionmatrix	context.hpp	/^	GLint modelviewmatrix, modelviewprojectionmatrix, normalmatrix;$/;"	m	struct:GL	access:public
modeset_cleanup	drm.cpp	/^static void modeset_cleanup(int fd, Context* context) {$/;"	f	file:	signature:(int fd, Context* context)
modeset_cleanup	drm.hpp	/^static void modeset_cleanup(int fd, Context* context);$/;"	p	signature:(int fd, Context* context)
mouse	input.h	/^  int mouse;$/;"	m	struct:__anon3	access:public
multipleMatrices4x4	renderUtils.cpp	/^void multipleMatrices4x4(float* vVertices, float* mRotate) {$/;"	f	signature:(float* vVertices, float* mRotate)
multipleMatrices4x4	renderUtils.hpp	/^void multipleMatrices4x4(float*, float*);$/;"	p	signature:(float*, float*)
multipleMatrix	skeleton.cpp	/^void bone::multipleMatrix (vector < vector < GLfloat > > mMatrix) {$/;"	f	class:bone	signature:(vector < vector < GLfloat > > mMatrix)
multipleMatrix	skeleton.hpp	/^    void multipleMatrix (std::vector < std::vector < GLfloat > > mMatrix);$/;"	p	class:bone	access:public	signature:(std::vector < std::vector < GLfloat > > mMatrix)
multipleMatrix	test2.cpp	/^    void multipleMatrix (vector < vector < GLfloat > > mMatrix) {$/;"	f	class:bone	access:public	signature:(vector < vector < GLfloat > > mMatrix)
name	skeleton.hpp	/^    std::string name;$/;"	m	class:bone	access:public
name	test2.cpp	/^    string name;$/;"	m	class:bone	file:	access:public
normalmatrix	context.hpp	/^	GLint modelviewmatrix, modelviewprojectionmatrix, normalmatrix;$/;"	m	struct:GL	access:public
normalsoffset	context.hpp	/^	GLuint positionsoffset, colorsoffset, normalsoffset;$/;"	m	struct:GL	access:public
page_flip_handler	drm.cpp	/^static void page_flip_handler(int fd, unsigned int frame,$/;"	f	file:	signature:(int fd, unsigned int frame, unsigned int sec, unsigned int usec, void *data)
page_flip_handler	drm.hpp	/^static void page_flip_handler(int fd, unsigned int frame, unsigned int sec, unsigned int usec, void *data);$/;"	p	signature:(int fd, unsigned int frame, unsigned int sec, unsigned int usec, void *data)
parent	skeleton.hpp	/^    bone* parent;$/;"	m	class:bone	access:public
parent	test2.cpp	/^    bone* parent;$/;"	m	class:bone	file:	access:public
parseInputHandler	input.cpp	/^char* parseInputHandler(int type, char* subject) {$/;"	f	signature:(int type, char* subject)
parseInputHandler	input.h	/^char* parseInputHandler(int, char*);$/;"	p	signature:(int, char*)
positionsoffset	context.hpp	/^	GLuint positionsoffset, colorsoffset, normalsoffset;$/;"	m	struct:GL	access:public
program	context.hpp	/^	GLuint program;$/;"	m	struct:GL	access:public
programObject	context.hpp	/^  GLuint programObject;$/;"	m	struct:__anon1	access:public
render_text	renderUtils.cpp	/^void render_text(ESContext* esContext, const char *text, float x, float y, float sx, float sy) {$/;"	f	signature:(ESContext* esContext, const char *text, float x, float y, float sx, float sy)
render_text	renderUtils.hpp	/^void render_text(ESContext*,const char*, float, float, float, float);$/;"	p	signature:(ESContext*,const char*, float, float, float, float)
run	context.hpp	/^  bool run;$/;"	m	struct:Flags	access:public
run	context.hpp	/^  bool run;$/;"	m	struct:__anon1	access:public
run	test.cpp	/^  int run;$/;"	m	struct:__anon1	file:	access:public
run	test3.cpp	/^  int run;$/;"	m	struct:__anon4	file:	access:public
saved_crtc	context.hpp	/^	drmModeCrtc *saved_crtc;$/;"	m	struct:Drm	access:public
surface	context.hpp	/^	EGLSurface surface;$/;"	m	struct:GL	access:public
surface	context.hpp	/^	struct gbm_surface *surface;$/;"	m	struct:Gbm	typeref:struct:Gbm::gbm_surface	access:public
t1	test.cpp	/^void t1() {$/;"	f	signature:()
t2	test.cpp	/^void t2() {$/;"	f	signature:()
tempAngle	gl.cpp	/^float tempAngle = 0.0;$/;"	v
uniform_color	context.hpp	/^  GLint uniform_color;$/;"	m	struct:Uniforms	access:public
uniform_istext	context.hpp	/^  GLint uniform_istext;$/;"	m	struct:Uniforms	access:public
uniforms	context.hpp	/^  Uniforms uniforms;$/;"	m	struct:Context	access:public
uniforms	context.hpp	/^  Uniforms uniforms;$/;"	m	struct:__anon1	access:public
updateFunc	esUtil.h	/^   void (ESCALLBACK *updateFunc) ( struct _escontext *, float deltaTime );$/;"	m	struct:_escontext	access:public
userData	esUtil.h	/^   UserData       userData;$/;"	m	struct:_escontext	access:public
userInterrupt	esUtil.cpp	/^GLboolean userInterrupt(ESContext *esContext)$/;"	f	signature:(ESContext *esContext)
vbo	context.hpp	/^	GLuint vbo[2];$/;"	m	struct:GL	access:public
vbo	context.hpp	/^  GLuint vbo[2];$/;"	m	struct:__anon1	access:public
wCustom	gl.cpp	/^float xCustom = -1.0, yCustom = 1.0, zCustom = 0.0, wCustom = 0.0;$/;"	v
weight	skeleton.hpp	/^    GLint weight;  $/;"	m	class:bone	access:public
weight	test2.cpp	/^    GLint weight;  $/;"	m	class:bone	file:	access:public
width	esUtil.h	/^   GLint       width;$/;"	m	struct:_escontext	access:public
xAngle	gl.cpp	/^float xAngle = 0.0, xRadius = 0.0, yAngle = 0.0, yRadius = 0.0, zAngle = 0.0, zRadius = 0.0;$/;"	v
xCustom	gl.cpp	/^float xCustom = -1.0, yCustom = 1.0, zCustom = 0.0, wCustom = 0.0;$/;"	v
xRadius	gl.cpp	/^float xAngle = 0.0, xRadius = 0.0, yAngle = 0.0, yRadius = 0.0, zAngle = 0.0, zRadius = 0.0;$/;"	v
x_display	esUtil.cpp	/^static Display *x_display = NULL;$/;"	v	file:
yAngle	gl.cpp	/^float xAngle = 0.0, xRadius = 0.0, yAngle = 0.0, yRadius = 0.0, zAngle = 0.0, zRadius = 0.0;$/;"	v
yCustom	gl.cpp	/^float xCustom = -1.0, yCustom = 1.0, zCustom = 0.0, wCustom = 0.0;$/;"	v
yRadius	gl.cpp	/^float xAngle = 0.0, xRadius = 0.0, yAngle = 0.0, yRadius = 0.0, zAngle = 0.0, zRadius = 0.0;$/;"	v
z	test.cpp	/^abc* z;$/;"	v
zAngle	gl.cpp	/^float xAngle = 0.0, xRadius = 0.0, yAngle = 0.0, yRadius = 0.0, zAngle = 0.0, zRadius = 0.0;$/;"	v
zCustom	gl.cpp	/^float xCustom = -1.0, yCustom = 1.0, zCustom = 0.0, wCustom = 0.0;$/;"	v
zRadius	gl.cpp	/^float xAngle = 0.0, xRadius = 0.0, yAngle = 0.0, yRadius = 0.0, zAngle = 0.0, zRadius = 0.0;$/;"	v
